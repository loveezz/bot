from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.keyboards import create_main_menu_keyboard, create_back_keyboard
from aiogram import Dispatcher
from aiogram.utils.markdown import escape_md
from handlers.api_service import post_request
from handlers.database import Add_user, get_user  # –ò–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
retry_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
retry_keyboard.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
authorized_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
authorized_keyboard.add(KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–æ—Ñ–æ–Ω—ã'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def auth_user(phone_number):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API.
    """
    data = {'phone': phone_number}
    response = post_request('check-tenant', data)
    if response is not None and "tenant_id" in response:
        return response["tenant_id"]
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    username = message.from_user.username
    user_data = get_user(username)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Telegram-–±–æ—Ç! üåü\n\n"
        "‚ú® –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏ üè† –∏ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º.\n\n"
        "üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –Ω–∏–∂–µ."
    )

    if user_data:
        tenant_id, phone_number, username = user_data
        message.bot["tenant_id"] = tenant_id  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tenant_id
        print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: tenant_id={tenant_id}, phone_number={phone_number}, username={username}")
        await message.answer(
            f"{welcome_message}\n\n"
            f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, *{username}*! üéâ\n"
            f"üÜî –í–∞—à tenant_id: `{tenant_id}`\n"
            f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{phone_number}`\n",
            parse_mode="Markdown",
            reply_markup=create_main_menu_keyboard()
        )
    else:
        print(f"[INFO] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        await message.answer(
            f"{welcome_message}\n\n*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ üì≤.*",
            parse_mode="Markdown",
            reply_markup=retry_keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def contact_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    phone_number = message.contact.phone_number
    if phone_number.startswith("+7"):
        phone_number = phone_number[1:]
    elif phone_number.startswith("8"):
        phone_number = f"7{phone_number[1:]}"

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
    tenant_id = await auth_user(phone_number)

    if tenant_id:
        username = escape_md(message.from_user.username)
        tenant_id_md = escape_md(str(tenant_id))
        phone_number_md = escape_md(phone_number)

        if Add_user(username, tenant_id, phone_number):
            message.bot["tenant_id"] = tenant_id
            await message.answer(
                f"üéâ *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!* üéâ\n\n"
                f"üÜî *–í–∞—à tenant_id:* `{tenant_id_md}`\n"
                f"üìû *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* `{phone_number_md}`\n",
                parse_mode="Markdown",
                reply_markup=authorized_keyboard
            )
        else:
            await message.answer(
                "‚ö†Ô∏è *–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                parse_mode="Markdown",
                reply_markup=authorized_keyboard
            )
    else:
        await message.answer(
            "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown",
            reply_markup=retry_keyboard
        )
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_authorize_handler(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(contact_handler, content_types=types.ContentType.CONTACT)
