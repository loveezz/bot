from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.api_service import get_doors_by_domofon, open_door
from aiogram import Dispatcher


async def open_door_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    print("[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω: /–û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å")
    domofons = message.bot.get("domofons", [])
    tenant_id = message.bot.get("tenant_id")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–æ—Ñ–æ–Ω—ã
    if not domofons:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for domofon in domofons:
        keyboard.add(KeyboardButton(text=f"–î–æ–º–æ—Ñ–æ–Ω {domofon['name']}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–æ—Ñ–æ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏:", reply_markup=keyboard)


async def choose_door_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–º–æ—Ñ–æ–Ω–∞.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–µ—Ä–µ–π.
    """
    print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–º–æ—Ñ–æ–Ω–∞: {message.text}")
    domofons = message.bot.get("domofons", [])
    tenant_id = message.bot.get("tenant_id")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –¥–æ–º–æ—Ñ–æ–Ω
    selected_domofon_name = message.text.replace("–î–æ–º–æ—Ñ–æ–Ω ", "")
    selected_domofon = next((d for d in domofons if d["name"] == selected_domofon_name), None)

    if not selected_domofon:
        await message.answer("–î–æ–º–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–≤–µ—Ä–µ–π
    domofon_id = selected_domofon["id"]
    doors = get_doors_by_domofon(domofon_id, tenant_id)
    if not doors or len(doors) == 0:
        await message.answer(f"–î–ª—è –¥–æ–º–æ—Ñ–æ–Ω–∞ {selected_domofon_name} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–µ—Ä–µ–π.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–≤–µ—Ä—è–º–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for door in doors:
        keyboard.add(KeyboardButton(text=f"–î–≤–µ—Ä—å {door['number']}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ—Ä—å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:", reply_markup=keyboard)
    message.bot["selected_domofon_id"] = domofon_id
    message.bot["doors"] = doors


async def confirm_open_door_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–≤–µ—Ä–∏.
    """
    print(f"[DEBUG] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏: {message.text}")
    domofon_id = message.bot.get("selected_domofon_id")
    tenant_id = message.bot.get("tenant_id")
    doors = message.bot.get("doors", [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–≤–µ—Ä–∏
    try:
        door_number = int(message.text.split(" ")[-1])
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–≤–µ—Ä–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–≤–µ—Ä—å
    selected_door = next((d for d in doors if d["number"] == door_number), None)
    if not selected_door:
        await message.answer("–î–≤–µ—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å
    door_id = selected_door["number"]
    response = open_door(domofon_id, tenant_id, door_id)

    if response:
        await message.answer(f"–î–≤–µ—Ä—å {door_number} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞! üö™")
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å {door_number}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def register_open_door_handler(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏.
    """
    dp.register_message_handler(open_door_handler, commands=["–û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å"])
    dp.register_message_handler(
        choose_door_handler, lambda message: message.text.startswith("–î–æ–º–æ—Ñ–æ–Ω")
    )
    dp.register_message_handler(
        confirm_open_door_handler, lambda message: message.text.startswith("–î–≤–µ—Ä—å")
    )